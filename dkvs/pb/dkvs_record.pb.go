// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dkvs_record.proto

package dkvs_pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CertType int32

const (
	CertType_Default  CertType = 0
	CertType_Contract CertType = 1
	CertType_NFT      CertType = 2
)

var CertType_name = map[int32]string{
	0: "Default",
	1: "Contract",
	2: "NFT",
}

var CertType_value = map[string]int32{
	"Default":  0,
	"Contract": 1,
	"NFT":      2,
}

func (x CertType) String() string {
	return proto.EnumName(CertType_name, int32(x))
}

func (CertType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7dd4d6d5ab499cba, []int{0}
}

type DkvsRecord_ValidityType int32

const (
	// setting an EOL says "this record is valid until..."
	DkvsRecord_EOL DkvsRecord_ValidityType = 0
)

var DkvsRecord_ValidityType_name = map[int32]string{
	0: "EOL",
}

var DkvsRecord_ValidityType_value = map[string]int32{
	"EOL": 0,
}

func (x DkvsRecord_ValidityType) String() string {
	return proto.EnumName(DkvsRecord_ValidityType_name, int32(x))
}

func (DkvsRecord_ValidityType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7dd4d6d5ab499cba, []int{0, 0}
}

type DkvsRecord_ValueType int32

const (
	DkvsRecord_DEFAULT       DkvsRecord_ValueType = 0
	DkvsRecord_GUN_SIGNATURE DkvsRecord_ValueType = 1
)

var DkvsRecord_ValueType_name = map[int32]string{
	0: "DEFAULT",
	1: "GUN_SIGNATURE",
}

var DkvsRecord_ValueType_value = map[string]int32{
	"DEFAULT":       0,
	"GUN_SIGNATURE": 1,
}

func (x DkvsRecord_ValueType) String() string {
	return proto.EnumName(DkvsRecord_ValueType_name, int32(x))
}

func (DkvsRecord_ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7dd4d6d5ab499cba, []int{0, 1}
}

type DkvsRecord struct {
	Version      uint32                  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	ValueType    uint32                  `protobuf:"varint,2,opt,name=valueType,proto3" json:"valueType,omitempty"`
	Value        []byte                  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Signature    []byte                  `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	ValidityType DkvsRecord_ValidityType `protobuf:"varint,5,opt,name=validityType,proto3,enum=dkvs.v1.pb.DkvsRecord_ValidityType" json:"validityType,omitempty"`
	Validity     uint64                  `protobuf:"varint,6,opt,name=validity,proto3" json:"validity,omitempty"`
	Seq          uint64                  `protobuf:"varint,7,opt,name=seq,proto3" json:"seq,omitempty"`
	Ttl          uint64                  `protobuf:"varint,8,opt,name=ttl,proto3" json:"ttl,omitempty"`
	PubKey       []byte                  `protobuf:"bytes,9,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Data         []byte                  `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DkvsRecord) Reset()         { *m = DkvsRecord{} }
func (m *DkvsRecord) String() string { return proto.CompactTextString(m) }
func (*DkvsRecord) ProtoMessage()    {}
func (*DkvsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd4d6d5ab499cba, []int{0}
}
func (m *DkvsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DkvsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DkvsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DkvsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DkvsRecord.Merge(m, src)
}
func (m *DkvsRecord) XXX_Size() int {
	return m.Size()
}
func (m *DkvsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DkvsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DkvsRecord proto.InternalMessageInfo

func (m *DkvsRecord) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *DkvsRecord) GetValueType() uint32 {
	if m != nil {
		return m.ValueType
	}
	return 0
}

func (m *DkvsRecord) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *DkvsRecord) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *DkvsRecord) GetValidityType() DkvsRecord_ValidityType {
	if m != nil {
		return m.ValidityType
	}
	return DkvsRecord_EOL
}

func (m *DkvsRecord) GetValidity() uint64 {
	if m != nil {
		return m.Validity
	}
	return 0
}

func (m *DkvsRecord) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DkvsRecord) GetTtl() uint64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *DkvsRecord) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *DkvsRecord) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 证书，也就是某种意义上的NFT。如果指定userPubkey，就是跟该账户绑定；如果没有指定，就可以转让。
type Cert struct {
	Version      uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type         uint32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	SubType      uint32 `protobuf:"varint,4,opt,name=subType,proto3" json:"subType,omitempty"`
	UserPubkey   []byte `protobuf:"bytes,5,opt,name=userPubkey,proto3" json:"userPubkey,omitempty"`
	Data         []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	IssueTime    uint64 `protobuf:"varint,7,opt,name=issueTime,proto3" json:"issueTime,omitempty"`
	Ttl          uint64 `protobuf:"varint,8,opt,name=ttl,proto3" json:"ttl,omitempty"`
	IssuerPubkey []byte `protobuf:"bytes,10,opt,name=issuerPubkey,proto3" json:"issuerPubkey,omitempty"`
	IssuerSign   []byte `protobuf:"bytes,11,opt,name=issuerSign,proto3" json:"issuerSign,omitempty"`
}

func (m *Cert) Reset()         { *m = Cert{} }
func (m *Cert) String() string { return proto.CompactTextString(m) }
func (*Cert) ProtoMessage()    {}
func (*Cert) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd4d6d5ab499cba, []int{1}
}
func (m *Cert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cert.Merge(m, src)
}
func (m *Cert) XXX_Size() int {
	return m.Size()
}
func (m *Cert) XXX_DiscardUnknown() {
	xxx_messageInfo_Cert.DiscardUnknown(m)
}

var xxx_messageInfo_Cert proto.InternalMessageInfo

func (m *Cert) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Cert) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cert) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Cert) GetSubType() uint32 {
	if m != nil {
		return m.SubType
	}
	return 0
}

func (m *Cert) GetUserPubkey() []byte {
	if m != nil {
		return m.UserPubkey
	}
	return nil
}

func (m *Cert) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Cert) GetIssueTime() uint64 {
	if m != nil {
		return m.IssueTime
	}
	return 0
}

func (m *Cert) GetTtl() uint64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *Cert) GetIssuerPubkey() []byte {
	if m != nil {
		return m.IssuerPubkey
	}
	return nil
}

func (m *Cert) GetIssuerSign() []byte {
	if m != nil {
		return m.IssuerSign
	}
	return nil
}

// DkvsRecord.value
type CertsRecordValue struct {
	UserData []byte  `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
	CertVect []*Cert `protobuf:"bytes,2,rep,name=certVect,proto3" json:"certVect,omitempty"`
}

func (m *CertsRecordValue) Reset()         { *m = CertsRecordValue{} }
func (m *CertsRecordValue) String() string { return proto.CompactTextString(m) }
func (*CertsRecordValue) ProtoMessage()    {}
func (*CertsRecordValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd4d6d5ab499cba, []int{2}
}
func (m *CertsRecordValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertsRecordValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertsRecordValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CertsRecordValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertsRecordValue.Merge(m, src)
}
func (m *CertsRecordValue) XXX_Size() int {
	return m.Size()
}
func (m *CertsRecordValue) XXX_DiscardUnknown() {
	xxx_messageInfo_CertsRecordValue.DiscardUnknown(m)
}

var xxx_messageInfo_CertsRecordValue proto.InternalMessageInfo

func (m *CertsRecordValue) GetUserData() []byte {
	if m != nil {
		return m.UserData
	}
	return nil
}

func (m *CertsRecordValue) GetCertVect() []*Cert {
	if m != nil {
		return m.CertVect
	}
	return nil
}

func init() {
	proto.RegisterEnum("dkvs.v1.pb.CertType", CertType_name, CertType_value)
	proto.RegisterEnum("dkvs.v1.pb.DkvsRecord_ValidityType", DkvsRecord_ValidityType_name, DkvsRecord_ValidityType_value)
	proto.RegisterEnum("dkvs.v1.pb.DkvsRecord_ValueType", DkvsRecord_ValueType_name, DkvsRecord_ValueType_value)
	proto.RegisterType((*DkvsRecord)(nil), "dkvs.v1.pb.DkvsRecord")
	proto.RegisterType((*Cert)(nil), "dkvs.v1.pb.Cert")
	proto.RegisterType((*CertsRecordValue)(nil), "dkvs.v1.pb.CertsRecordValue")
}

func init() { proto.RegisterFile("dkvs_record.proto", fileDescriptor_7dd4d6d5ab499cba) }

var fileDescriptor_7dd4d6d5ab499cba = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xd1, 0x8a, 0xd3, 0x40,
	0x14, 0x86, 0x33, 0x6d, 0xb6, 0x4d, 0x4f, 0xb3, 0x92, 0x1d, 0x44, 0x07, 0x91, 0x10, 0xe3, 0x4d,
	0x50, 0x09, 0xb8, 0x3e, 0xc1, 0xba, 0xed, 0x16, 0x71, 0xa9, 0x92, 0x4d, 0x7b, 0x21, 0xc2, 0x92,
	0xb4, 0xe3, 0x12, 0x9a, 0x4d, 0x62, 0x32, 0x09, 0xf4, 0x15, 0xbc, 0xf2, 0xb1, 0xbc, 0xdc, 0x4b,
	0x2f, 0xa5, 0x7d, 0x04, 0x5f, 0x40, 0xe6, 0xa4, 0x4d, 0xba, 0x20, 0x7b, 0x77, 0xfe, 0x6f, 0xce,
	0x9c, 0xfe, 0xf9, 0x4f, 0x07, 0x4e, 0x96, 0xab, 0xaa, 0xb8, 0xce, 0xf9, 0x22, 0xcd, 0x97, 0x6e,
	0x96, 0xa7, 0x22, 0xa5, 0x20, 0x91, 0x5b, 0xbd, 0x75, 0xb3, 0xd0, 0xfe, 0xdb, 0x01, 0x18, 0xad,
	0xaa, 0xc2, 0xc3, 0x06, 0xca, 0xa0, 0x5f, 0xf1, 0xbc, 0x88, 0xd2, 0x84, 0x11, 0x8b, 0x38, 0xc7,
	0xde, 0x5e, 0xd2, 0xe7, 0x30, 0xa8, 0x82, 0xb8, 0xe4, 0xfe, 0x3a, 0xe3, 0xac, 0x83, 0x67, 0x2d,
	0xa0, 0x8f, 0xe1, 0x08, 0x05, 0xeb, 0x5a, 0xc4, 0xd1, 0xbd, 0x5a, 0xc8, 0x3b, 0x45, 0x74, 0x93,
	0x04, 0xa2, 0xcc, 0x39, 0x53, 0xf1, 0xa4, 0x05, 0x74, 0x02, 0x7a, 0x15, 0xc4, 0xd1, 0x32, 0x12,
	0x6b, 0x1c, 0x7a, 0x64, 0x11, 0xe7, 0xd1, 0xe9, 0x4b, 0xb7, 0x75, 0xe7, 0xb6, 0xce, 0xdc, 0xf9,
	0x41, 0xab, 0x77, 0xef, 0x22, 0x7d, 0x06, 0xda, 0x5e, 0xb3, 0x9e, 0x45, 0x1c, 0xd5, 0x6b, 0x34,
	0x35, 0xa0, 0x5b, 0xf0, 0xef, 0xac, 0x8f, 0x58, 0x96, 0x92, 0x08, 0x11, 0x33, 0xad, 0x26, 0x42,
	0xc4, 0xf4, 0x09, 0xf4, 0xb2, 0x32, 0xfc, 0xc8, 0xd7, 0x6c, 0x80, 0x1e, 0x77, 0x8a, 0x52, 0x50,
	0x97, 0x81, 0x08, 0x18, 0x20, 0xc5, 0xda, 0x7e, 0x0a, 0xfa, 0xa1, 0x13, 0xda, 0x87, 0xee, 0xf8,
	0xd3, 0xa5, 0xa1, 0xd8, 0xaf, 0x61, 0x30, 0x6f, 0xe2, 0x18, 0x42, 0x7f, 0x34, 0xbe, 0x38, 0x9b,
	0x5d, 0xfa, 0x86, 0x42, 0x4f, 0xe0, 0x78, 0x32, 0x9b, 0x5e, 0x5f, 0x7d, 0x98, 0x4c, 0xcf, 0xfc,
	0x99, 0x37, 0x36, 0x88, 0xfd, 0xa3, 0x03, 0xea, 0x39, 0xcf, 0xc5, 0x03, 0x79, 0x53, 0x50, 0x93,
	0xe0, 0xb6, 0x8e, 0x7a, 0xe0, 0x61, 0x2d, 0x99, 0x90, 0x49, 0x75, 0xb1, 0x15, 0x6b, 0x39, 0xa1,
	0x28, 0x43, 0x0c, 0x50, 0xad, 0x27, 0xec, 0x24, 0x35, 0x01, 0xca, 0x82, 0xe7, 0x9f, 0xcb, 0x70,
	0xc5, 0xd7, 0x98, 0xae, 0xee, 0x1d, 0x90, 0xe6, 0xf3, 0x7a, 0xed, 0xe7, 0xc9, 0x8d, 0x45, 0x45,
	0x51, 0x72, 0x3f, 0xba, 0xe5, 0xbb, 0xd0, 0x5a, 0xf0, 0x9f, 0xe8, 0x6c, 0xd0, 0xf1, 0x78, 0xff,
	0x2b, 0x75, 0x54, 0xf7, 0x98, 0xf4, 0x51, 0xeb, 0xab, 0xe8, 0x26, 0x61, 0xc3, 0xda, 0x47, 0x4b,
	0xec, 0xaf, 0x60, 0xc8, 0x2c, 0x76, 0x8b, 0xc6, 0x10, 0xe5, 0x4a, 0xa5, 0xd3, 0x91, 0xf4, 0x47,
	0xf0, 0x46, 0xa3, 0xe9, 0x1b, 0xd0, 0x16, 0x3c, 0x17, 0x73, 0xbe, 0x10, 0xac, 0x63, 0x75, 0x9d,
	0xe1, 0xa9, 0x71, 0xf8, 0x9f, 0x91, 0xb3, 0xbc, 0xa6, 0xe3, 0x95, 0x0b, 0x9a, 0x24, 0xcd, 0x5a,
	0xf8, 0xb7, 0xa0, 0x8c, 0x85, 0xa1, 0x50, 0x1d, 0xb4, 0xf3, 0x34, 0x11, 0x79, 0xb0, 0x10, 0x06,
	0x91, 0x7b, 0x9c, 0x5e, 0xf8, 0x46, 0xe7, 0xfd, 0x8b, 0x5f, 0x1b, 0x93, 0xdc, 0x6d, 0x4c, 0xf2,
	0x67, 0x63, 0x92, 0x9f, 0x5b, 0x53, 0xb9, 0xdb, 0x9a, 0xca, 0xef, 0xad, 0xa9, 0x7c, 0xe9, 0xe3,
	0x4b, 0xca, 0xc2, 0xb0, 0x87, 0xcf, 0xe8, 0xdd, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x41,
	0x09, 0x56, 0x5b, 0x03, 0x00, 0x00,
}

func (m *DkvsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DkvsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DkvsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintDkvsRecord(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintDkvsRecord(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Ttl != 0 {
		i = encodeVarintDkvsRecord(dAtA, i, uint64(m.Ttl))
		i--
		dAtA[i] = 0x40
	}
	if m.Seq != 0 {
		i = encodeVarintDkvsRecord(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x38
	}
	if m.Validity != 0 {
		i = encodeVarintDkvsRecord(dAtA, i, uint64(m.Validity))
		i--
		dAtA[i] = 0x30
	}
	if m.ValidityType != 0 {
		i = encodeVarintDkvsRecord(dAtA, i, uint64(m.ValidityType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintDkvsRecord(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintDkvsRecord(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ValueType != 0 {
		i = encodeVarintDkvsRecord(dAtA, i, uint64(m.ValueType))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintDkvsRecord(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Cert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IssuerSign) > 0 {
		i -= len(m.IssuerSign)
		copy(dAtA[i:], m.IssuerSign)
		i = encodeVarintDkvsRecord(dAtA, i, uint64(len(m.IssuerSign)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.IssuerPubkey) > 0 {
		i -= len(m.IssuerPubkey)
		copy(dAtA[i:], m.IssuerPubkey)
		i = encodeVarintDkvsRecord(dAtA, i, uint64(len(m.IssuerPubkey)))
		i--
		dAtA[i] = 0x52
	}
	if m.Ttl != 0 {
		i = encodeVarintDkvsRecord(dAtA, i, uint64(m.Ttl))
		i--
		dAtA[i] = 0x40
	}
	if m.IssueTime != 0 {
		i = encodeVarintDkvsRecord(dAtA, i, uint64(m.IssueTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintDkvsRecord(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UserPubkey) > 0 {
		i -= len(m.UserPubkey)
		copy(dAtA[i:], m.UserPubkey)
		i = encodeVarintDkvsRecord(dAtA, i, uint64(len(m.UserPubkey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SubType != 0 {
		i = encodeVarintDkvsRecord(dAtA, i, uint64(m.SubType))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintDkvsRecord(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDkvsRecord(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintDkvsRecord(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CertsRecordValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertsRecordValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertsRecordValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CertVect) > 0 {
		for iNdEx := len(m.CertVect) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CertVect[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDkvsRecord(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.UserData) > 0 {
		i -= len(m.UserData)
		copy(dAtA[i:], m.UserData)
		i = encodeVarintDkvsRecord(dAtA, i, uint64(len(m.UserData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDkvsRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovDkvsRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DkvsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovDkvsRecord(uint64(m.Version))
	}
	if m.ValueType != 0 {
		n += 1 + sovDkvsRecord(uint64(m.ValueType))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDkvsRecord(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovDkvsRecord(uint64(l))
	}
	if m.ValidityType != 0 {
		n += 1 + sovDkvsRecord(uint64(m.ValidityType))
	}
	if m.Validity != 0 {
		n += 1 + sovDkvsRecord(uint64(m.Validity))
	}
	if m.Seq != 0 {
		n += 1 + sovDkvsRecord(uint64(m.Seq))
	}
	if m.Ttl != 0 {
		n += 1 + sovDkvsRecord(uint64(m.Ttl))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovDkvsRecord(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDkvsRecord(uint64(l))
	}
	return n
}

func (m *Cert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovDkvsRecord(uint64(m.Version))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDkvsRecord(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovDkvsRecord(uint64(m.Type))
	}
	if m.SubType != 0 {
		n += 1 + sovDkvsRecord(uint64(m.SubType))
	}
	l = len(m.UserPubkey)
	if l > 0 {
		n += 1 + l + sovDkvsRecord(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDkvsRecord(uint64(l))
	}
	if m.IssueTime != 0 {
		n += 1 + sovDkvsRecord(uint64(m.IssueTime))
	}
	if m.Ttl != 0 {
		n += 1 + sovDkvsRecord(uint64(m.Ttl))
	}
	l = len(m.IssuerPubkey)
	if l > 0 {
		n += 1 + l + sovDkvsRecord(uint64(l))
	}
	l = len(m.IssuerSign)
	if l > 0 {
		n += 1 + l + sovDkvsRecord(uint64(l))
	}
	return n
}

func (m *CertsRecordValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserData)
	if l > 0 {
		n += 1 + l + sovDkvsRecord(uint64(l))
	}
	if len(m.CertVect) > 0 {
		for _, e := range m.CertVect {
			l = e.Size()
			n += 1 + l + sovDkvsRecord(uint64(l))
		}
	}
	return n
}

func sovDkvsRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDkvsRecord(x uint64) (n int) {
	return sovDkvsRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DkvsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDkvsRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DkvsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DkvsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueType", wireType)
			}
			m.ValueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValueType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidityType", wireType)
			}
			m.ValidityType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidityType |= DkvsRecord_ValidityType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			m.Validity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Validity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ttl |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDkvsRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDkvsRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			m.SubType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPubkey = append(m.UserPubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.UserPubkey == nil {
				m.UserPubkey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueTime", wireType)
			}
			m.IssueTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssueTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ttl |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerPubkey = append(m.IssuerPubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.IssuerPubkey == nil {
				m.IssuerPubkey = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerSign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerSign = append(m.IssuerSign[:0], dAtA[iNdEx:postIndex]...)
			if m.IssuerSign == nil {
				m.IssuerSign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDkvsRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertsRecordValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDkvsRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertsRecordValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertsRecordValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserData = append(m.UserData[:0], dAtA[iNdEx:postIndex]...)
			if m.UserData == nil {
				m.UserData = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertVect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertVect = append(m.CertVect, &Cert{})
			if err := m.CertVect[len(m.CertVect)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDkvsRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDkvsRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDkvsRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDkvsRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDkvsRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDkvsRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDkvsRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDkvsRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDkvsRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDkvsRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDkvsRecord = fmt.Errorf("proto: unexpected end of group")
)
